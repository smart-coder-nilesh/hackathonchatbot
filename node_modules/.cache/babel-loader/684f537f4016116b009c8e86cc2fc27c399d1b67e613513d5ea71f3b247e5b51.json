{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import\"./App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[messages,setMessages]=useState([]);const[userMessage,setUserMessage]=useState(\"\");const[isProcessing,setIsProcessing]=useState(false);const chatWindowRef=useRef(null);// Ref for the chat window\nconst scrollToBottom=()=>{if(chatWindowRef.current){chatWindowRef.current.scrollTop=chatWindowRef.current.scrollHeight;}};useEffect(()=>{scrollToBottom();// Automatically scroll down when messages change\n},[messages]);const sendMessage=async()=>{if(userMessage.trim()===\"\")return;// Add the user's message to the chat\nsetMessages(prevMessages=>[...prevMessages,{sender:\"user\",text:userMessage}]);setUserMessage(\"\");setIsProcessing(true);try{// Make the API call to the backend\nlet response=await fetch(\"https://mevpskgvab.execute-api.ap-south-1.amazonaws.com/prod/getlambdaresponse\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({messagefrombody:userMessage.toString()})});if(!response.ok){throw new Error(\"API call failed\");}const responseData=await response.json();console.log(responseData.message);// Add the bot's response to the chat\nsetMessages(prevMessages=>[...prevMessages,{sender:\"bot\",text:responseData.message}]);}catch(error){// Handle API error\nsetMessages(prevMessages=>[...prevMessages,{sender:\"bot\",text:\"Oops! Something went wrong. Please try again.\"}]);}finally{setIsProcessing(false);}};const handleKeyPress=e=>{if(e.key===\"Enter\"){sendMessage();}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Langflow Chat\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-window\",ref:chatWindowRef,children:[messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"chat-message \".concat(msg.sender===\"user\"?\"user\":\"bot\"),children:/*#__PURE__*/_jsx(\"span\",{className:\"message-text\",children:msg.text})},index)),isProcessing&&/*#__PURE__*/_jsxs(\"div\",{className:\"chat-message bot\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"message-text\",children:\"Typing...\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"dot-typing\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type your message...\",value:userMessage,onChange:e=>setUserMessage(e.target.value),onKeyPress:handleKeyPress}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,disabled:isProcessing,children:isProcessing?\"Sending...\":\"Send\"})]})]});}export default App;","map":{"version":3,"names":["React","useState","useRef","useEffect","jsx","_jsx","jsxs","_jsxs","App","messages","setMessages","userMessage","setUserMessage","isProcessing","setIsProcessing","chatWindowRef","scrollToBottom","current","scrollTop","scrollHeight","sendMessage","trim","prevMessages","sender","text","response","fetch","method","headers","body","JSON","stringify","messagefrombody","toString","ok","Error","responseData","json","console","log","message","error","handleKeyPress","e","key","className","children","ref","map","msg","index","concat","type","placeholder","value","onChange","target","onKeyPress","onClick","disabled"],"sources":["/home/runner/work/hackathonchatbot/hackathonchatbot/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const chatWindowRef = useRef(null); // Ref for the chat window\n\n  const scrollToBottom = () => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom(); // Automatically scroll down when messages change\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (userMessage.trim() === \"\") return;\n\n    // Add the user's message to the chat\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { sender: \"user\", text: userMessage },\n    ]);\n\n    setUserMessage(\"\");\n    setIsProcessing(true);\n\n    try {\n\n      // Make the API call to the backend\n      let response = await fetch(\"https://mevpskgvab.execute-api.ap-south-1.amazonaws.com/prod/getlambdaresponse\", {\n        method: \"POST\",\n        headers: {\n           \"Content-Type\": \"application/json\"},\n        body: JSON.stringify({ messagefrombody: userMessage.toString() }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"API call failed\");\n      }\n\n      const responseData = await response.json();\n      console.log(responseData.message);\n      // Add the bot's response to the chat\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"bot\", text: responseData.message },\n      ]);\n    } catch (error) {\n      // Handle API error\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"bot\", text: \"Oops! Something went wrong. Please try again.\" },\n      ]);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <h1>Langflow Chat</h1>\n      </div>\n      <div className=\"chat-window\" ref={chatWindowRef}>\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={`chat-message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`}\n          >\n            <span className=\"message-text\">{msg.text}</span>\n          </div>\n        ))}\n        {isProcessing && (\n          <div className=\"chat-message bot\">\n            <span className=\"message-text\">Typing...</span>\n            <div className=\"dot-typing\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          value={userMessage}\n          onChange={(e) => setUserMessage(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        <button onClick={sendMessage} disabled={isProcessing}>\n          {isProcessing ? \"Sending...\" : \"Send\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}